{"version":3,"sources":["components/Header.js","components/Article.js","articlelist.js","components/ArticleList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Link","to","href","target","rel","Component","LinkRenderer","props","children","Article","_ref","_this","match","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","property","filepath","params","path","getMarkdownData","nextProps","location","that","setState","processor","remark","use","reactRenderer","remarkReactComponents","fetch","then","r","text","htmldata","processSync","gfm","contents","JSON","parse","document","title","className","components_Header","date","list","description","ArticleList","articleList","map","item","idx","key","App","HashRouter","Switch","Route","exact","component","Boolean","window","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c5a1fca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n              <h1><Link to=\"/\">Iroirous Blog</Link></h1>\r\n              <ul>\r\n                <li><a href=\"https://iroirous.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Homepage</a></li>\r\n                <li><a href=\"https://twitter.com/iroirous\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a></li>\r\n                <li><a href=\"https://github.com/iroirous\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></li>\r\n              </ul>\r\n            </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport remark from 'remark';\r\nimport reactRenderer from 'remark-react';\r\nimport Header from './Header.js';\r\n\r\n// 記事内のリンクを新しいタブで開くようにする\r\nfunction LinkRenderer(props){\r\n    return <a href={props.href} target=\"noopener noreferrer\">{props.children}</a>\r\n}\r\n\r\nclass Article extends Component{\r\n    constructor({match}){\r\n        super();\r\n        this.state = {\r\n            markdown: \"\",\r\n            property: {},\r\n            filepath: \"./article/\" + match.params.path\r\n        };\r\n        this.getMarkdownData();\r\n    }\r\n    \r\n    // 別の記事へ遷移したときに画面再描画のため実行される処理\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.location !== this.props.location){\r\n            const that = this;\r\n            this.setState({\r\n                filepath: \"./article/\" + nextProps.match.params.path\r\n            }, () => {\r\n                that.getMarkdownData();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMarkdownData(){\r\n        let that = this;\r\n        const processor = remark().use(reactRenderer, {\r\n            remarkReactComponents: {\r\n                a: LinkRenderer\r\n            }\r\n        });\r\n        fetch(this.state.filepath).then((r) => r.text()).then((text) => {\r\n            const property = text.match(/<!--([\\s\\S]+?)-->/);\r\n            const htmldata = processor.processSync(text, {gfm: true}).contents;\r\n            that.setState({\r\n                markdown: htmldata,\r\n                property: JSON.parse(property[1])\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        document.title = this.state.property.title + \" - Iroirous Blog\";\r\n        return (\r\n            <div className=\"ArticlePage\">\r\n                <Header />\r\n                <article>\r\n                    <div className=\"articleHeader\">\r\n                        <h1>{this.state.property.title}</h1>\r\n                        <p>{this.state.property.date}</p>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        {this.state.markdown}\r\n                    </div>\r\n                </article>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Article;","export const list = [{\"title\":\"LinuxのカーネルをビルドしてVirtualBoxで動かしてみた\",\"date\":\"2019-06-01\",\"description\":\"GMO AD Partners様の記事を参考にカーネルをビルドしてみました。ちょっとした忘備録です。\",\"path\":\"20190601_kernelbuild.md\"},{\"title\":\"HP ENVY x360 13(Ryzen3/8GBモデル)ベンチマークテスト\",\"date\":\"2019-03-12\",\"description\":\"HP ENVY x360 13インチ(Ryzen3/8GB RAM)の各種ベンチマークテスト結果です。CINEBENCH R15・R20、FF14ベンチ、3DMark Sky Diver、3DMark Fire Strike、Windowsエクスペリエンスインデックス、CrystalDiskMarkの結果を記載しています。\",\"path\":\"20190311_hpenvy360.md\"},{\"title\":\"自宅デスクトップPCのベンチマークをしてみた（記録用）\",\"date\":\"2019-03-10\",\"description\":\"Core i5-6500, GTX 1050, 8GB RAM, 240GB SSD搭載PCのベンチマーク結果です。\",\"path\":\"20190310_i56500bench.md\"},{\"title\":\"オンボロノートPCとRaspberry Piで作るマイクラサーバ\",\"date\":\"2019-03-04\",\"description\":\"オンボロPentiumノートPCとRaspberry Piを連携させて、マイクラサーバを作った話です。\",\"path\":\"20190304_mcserver.md\"}]","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Header from './Header.js';\r\nimport { list } from '../articlelist.js';\r\n\r\nclass ArticleList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {articleList: list, property: null};\r\n        document.title = \"Iroirous Blog\";\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"ArticleList\">\r\n                <Header />\r\n                {\r\n                    this.state.articleList.map((item, idx) => \r\n                        <div key={idx} className=\"ArticleListItem\">\r\n                            <Link to={\"./article/\" + item.path}>\r\n                                <h2>{item.title}</h2>\r\n                                <div className=\"ArticleListDate\">\r\n                                    {item.date}\r\n                                </div>\r\n                                <div className=\"ArticleListDescription\">\r\n                                    {item.description}\r\n                                </div>\r\n                            </Link>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ArticleList;","import React, { Component } from 'react';\nimport './App.css';\nimport Article from './components/Article.js';\nimport { Route, HashRouter, Switch } from 'react-router-dom';\nimport ArticleList from './components/ArticleList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={ArticleList} />\n            <Route path=\"/article/:path\" component={Article} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}